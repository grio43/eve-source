#Embedded file name: C:\BuildAgent\work\ba3dced9a47cf95a\eve\release\V22.02\packages\behaviors\registry\monitors.py
from behaviors.registry.registrator import register_monitor
from fsd import attributes
register_monitor('behaviors.monitors.abyssal_deadspace.ResetOnCloseToAbyssalDangerZone')
register_monitor('behaviors.monitors.ballparks.BubbleChangedMonitor')
register_monitor('behaviors.monitors.ballparks.TargetChangingBubbleMonitor', dict(targetAddress=attributes.BlackboardAddressAttribute(), bubbleIdAddress=attributes.BlackboardAddressAttribute(is_optional=True), resetOnEnter=attributes.BooleanAttribute()))
register_monitor('behaviors.monitors.ballparks.BallEnteredOrLeftBubbleGroupMonitor', dict(), short_description='Monitors the bubbles of all group members for balls entering/leaving their bubble.', detailed_description='Monitors bubble enter/leave events in the bubbles of all group members and wakesup the tree when one of those occurs.')
register_monitor('behaviors.monitors.ballparks.TargetWithOwnerEnteredBubbleMonitor', dict(targetSetAddress=attributes.BlackboardAddressAttribute(), ownerIds=attributes.OwnerListAttribute()))
register_monitor('behaviors.monitors.ballparks.TargetsWithOwnerEnteredBubbleMonitor', dict(targetSetAddress=attributes.BlackboardAddressAttribute(), ownerIds=attributes.OwnerListAttribute()))
register_monitor('behaviors.monitors.ballparks.TargetLeavingParkMonitor', dict(targetAddress=attributes.BlackboardAddressAttribute(), clearValue=attributes.BooleanAttribute()))
register_monitor('behaviors.monitors.ballparks.MonitorProximitySensors', dict(objectListAddress=attributes.BlackboardAddressAttribute(), includedCategories=attributes.InventoryCategorySetAttribute(), excludedGroups=attributes.InventoryGroupSetAttribute(), validOwnerIds=attributes.OwnerListAttribute(), invalidOwnerIds=attributes.OwnerListAttribute(), tags=attributes.StringSetAttribute()))
register_monitor('behaviors.monitors.ballparks.MonitorProximitySensorsForGroupMembers', dict(objectListAddress=attributes.BlackboardAddressAttribute(), includedCategories=attributes.InventoryCategorySetAttribute(), excludedGroups=attributes.InventoryGroupSetAttribute(), validOwnerIds=attributes.OwnerListAttribute(), invalidOwnerIds=attributes.OwnerListAttribute()))
register_monitor('behaviors.monitors.ballparks.MonitorSpecificProximitySensor', dict(objectListAddress=attributes.BlackboardAddressAttribute(), includedCategories=attributes.InventoryCategorySetAttribute(), excludedGroups=attributes.InventoryGroupSetAttribute(), validOwnerIds=attributes.OwnerListAttribute(), invalidOwnerIds=attributes.OwnerListAttribute(), proximitySensorAddress=attributes.BlackboardAddressAttribute()))
register_monitor('behaviors.monitors.ballparks.MonitorSpecificProximitySensorForGroupMembers', dict(objectListAddress=attributes.BlackboardAddressAttribute(), includedCategories=attributes.InventoryCategorySetAttribute(), excludedGroups=attributes.InventoryGroupSetAttribute(), validOwnerIds=attributes.OwnerListAttribute(), invalidOwnerIds=attributes.OwnerListAttribute(), proximitySensorAddress=attributes.BlackboardAddressAttribute()))
register_monitor('behaviors.monitors.ballparks.MonitorInvulnerabilityCanceledInBubble', dict(targetIdListAddress=attributes.BlackboardAddressAttribute(is_optional=True)))
register_monitor('behaviors.monitors.ballparks.MonitorInvulnerabilityCanceledInGroupBubbles', dict(targetIdListAddress=attributes.BlackboardAddressAttribute(is_optional=True)))
register_monitor('behaviors.monitors.ballparks.ClearBlackboardChannelOnItemExplosion', dict(itemIdAddress=attributes.BlackboardAddressAttribute(index=0), blackBoardChannelAddress=attributes.BlackboardAddressAttribute(index=1)))
register_monitor('behaviors.monitors.blackboards.BlackboardMessageMonitor', dict(messageAddress=attributes.BlackboardAddressAttribute()))
register_monitor('behaviors.monitors.blackboards.BlackboardMessageMonitorBlocking', dict(messageAddress=attributes.BlackboardAddressAttribute()))
register_monitor('behaviors.monitors.blackboards.BlackboardFlagOnMessageUpdate', dict(messageAddress=attributes.BlackboardAddressAttribute(), flagAddress=attributes.BlackboardAddressAttribute()))
register_monitor('behaviors.monitors.combat.WaitForAggressiveAct', dict(combatTargetsAddress=attributes.BlackboardAddressAttribute()))
register_monitor('behaviors.monitors.combat.SetFlagAndResetWhenAggressed', dict(flagAddress=attributes.BlackboardAddressAttribute(), onlyPlayerAggressors=attributes.BooleanAttribute(index=3, is_optional=True, default=False)))
register_monitor('behaviors.monitors.combat.FlagAggressionAndReportMyPosition', dict(combatTargetsAddress=attributes.BlackboardAddressAttribute(index=0), flagAddress=attributes.BlackboardAddressAttribute(index=1), myPositionAddress=attributes.BlackboardAddressAttribute(index=2), onlyPlayerAggressors=attributes.BooleanAttribute(index=3, is_optional=True, default=False)))
register_monitor('behaviors.monitors.combat.ClearValueAndResetIfTargetCloaks', dict(targetAddress=attributes.BlackboardAddressAttribute(), valueAddress=attributes.BlackboardAddressAttribute()))
register_monitor('behaviors.monitors.combat.MaxLockedTargetsChangedMonitor')
register_monitor('behaviors.monitors.combat.MonitorAssistanceToTargets', dict(combatTargetsAddress=attributes.BlackboardAddressAttribute()))
register_monitor('behaviors.monitors.combat.MonitorAssistanceToGroupTargets', dict(combatTargetsAddress=attributes.BlackboardAddressAttribute()))
register_monitor('behaviors.monitors.combat.MonitorAggressionTowardsTargets', dict(monitoredTargetsAddress=attributes.BlackboardAddressAttribute(), combatTargetsAddress=attributes.BlackboardAddressAttribute()), short_description='Monitors the bubble for aggression towards itemIDs read from blackboard.', detailed_description='Monitors aggression in the items bubble towards itemIDs specified in a blackboard address "monitoredTargetsAddress" and adding any aggressors to a collection in a different blackboard address "combatTargetsAddress."')
register_monitor('behaviors.monitors.combat.MonitorAggressionTowardsGroupTargets', dict(monitoredTargetsAddress=attributes.BlackboardAddressAttribute(), combatTargetsAddress=attributes.BlackboardAddressAttribute()), short_description='Monitors the bubbles of all group members for aggression towards itemIDs read from blackboard.', detailed_description='Monitors aggression in the bubbles of all group members towards itemIDs specified in a blackboard address "monitoredTargetsAddress" and adding any aggressors to a collection in a different blackboard address "combatTargetsAddress."')
register_monitor('behaviors.monitors.combat.MonitorSecurityStatusLoss', dict(combatTargetsAddress=attributes.BlackboardAddressAttribute(index=0), maxDistance=attributes.IntegerAttribute(index=1, is_optional=True, default=None, description='in m - if no maxDistance is set, it applies to the whole bubble')), short_description='Monitors when a character loses sec status and adds them to the combat target')
register_monitor('behaviors.monitors.combattargets.CombatRangeMonitor', dict(combatRangeRecalculateAddress=attributes.BlackboardAddressAttribute()))
register_monitor('behaviors.monitors.combattargets.MonitorTargetAdded', dict(targetAddress=attributes.BlackboardAddressAttribute()))
register_monitor('behaviors.monitors.damage.ArmorDamageThresholdMonitor', dict(armorRatioThreshold=attributes.FloatAttribute(), thresholdReachedAddress=attributes.BlackboardAddressAttribute()))
register_monitor('behaviors.monitors.dungeons.MonitorDungeonTimerSetBooleanAndReset', dict(timerId=attributes.IntegerAttribute(index=1), messageAddress=attributes.BlackboardAddressAttribute(index=2)))
register_monitor('behaviors.monitors.dungeons.DungeonCancelInvulnerableOnTrigger', dict(triggerTypeId=attributes.DungeonTriggerSelectAttribute(index=1), checkRoomScenario=attributes.BooleanAttribute(index=2), reason=attributes.StringAttribute(index=3)))
register_monitor('behaviors.monitors.dungeons.DungeonSetBlackboardBooleanOnTriggerEvent', dict(triggerEventTypeId=attributes.DungeonTriggerEventSelectAttribute(index=1), blackboardAddress=attributes.BlackboardAddressAttribute(index=2), trueOrFalse=attributes.BooleanAttribute(index=3)))
register_monitor('behaviors.monitors.effects.EffectUsageMonitor', dict(effectId=attributes.DogmaEffectIdAttribute(), shipIdSetAddress=attributes.BlackboardAddressAttribute()))
register_monitor('behaviors.monitors.entities.AdditionalInventoryRemovalMonitor')
register_monitor('behaviors.monitors.entities.InventoryChangeMonitor')
register_monitor('behaviors.monitors.groups.GroupMembershipMonitor')
register_monitor('behaviors.monitors.logistics.ManageRemoteRepairEffect', dict(repairEffectIdAddress=attributes.BlackboardAddressAttribute(), prioritizedWatchlistAddress=attributes.BlackboardAddressAttribute()))
register_monitor('behaviors.monitors.messages.SendMessageOnMessageMonitor', dict(monitoredMessageId=attributes.MessageSelectAttribute()))
register_monitor('behaviors.monitors.messages.SendMessageOnMessageWhenCargoIsFullMonitor', dict(monitoredMessageId=attributes.MessageSelectAttribute(index=1), notifiedMessageId=attributes.MessageSelectAttribute(index=2)))
register_monitor('behaviors.monitors.navigation.GroupMemberWarpModeChangedMonitor')
register_monitor('behaviors.monitors.reinforcements.AreReinforcementsAuthorizedMonitor')
register_monitor('behaviors.monitors.reinforcements.AreReinforcementAvailableMonitor')
register_monitor('behaviors.monitors.standings.MonitorProximitySensorForGroupStanding', dict(includedCategories=attributes.InventoryCategorySetAttribute(index=0), excludedGroups=attributes.InventoryGroupSetAttribute(index=1), validOwnerIds=attributes.OwnerListAttribute(index=2), invalidOwnerIds=attributes.OwnerListAttribute(index=3), itemIdsWithHostileStandingsAddress=attributes.BlackboardAddressAttribute(is_optional=True, index=4), itemIdsWithNeutralStandingsAddress=attributes.BlackboardAddressAttribute(is_optional=True, index=5), itemIdsWithFriendlyStandingsAddress=attributes.BlackboardAddressAttribute(is_optional=True, index=6), flagHostileStandingsAddress=attributes.BlackboardAddressAttribute(is_optional=True, index=4.1), flagNeutralStandingsAddress=attributes.BlackboardAddressAttribute(is_optional=True, index=5.1), flagFriendlyStandingsAddress=attributes.BlackboardAddressAttribute(is_optional=True, index=6.1), lastPositionForHostileStandingsAddress=attributes.BlackboardAddressAttribute(is_optional=True, index=4.2), lastPositionForNeutralStandingsAddress=attributes.BlackboardAddressAttribute(is_optional=True, index=5.2), lastPositionForFriendlyStandingsAddress=attributes.BlackboardAddressAttribute(is_optional=True, index=6.2)))
register_monitor('behaviors.monitors.superweapon.WaitForTurboShieldState', dict(turboShieldState=attributes.IntegerAttribute(), messageAddress=attributes.BlackboardAddressAttribute(is_optional=True)))
register_monitor('behaviors.monitors.targeting.TargetLostMonitor', dict(targetAddress=attributes.BlackboardAddressAttribute()))
register_monitor('behaviors.monitors.timers.ResetAfterTimeout', dict(timerAddress=attributes.BlackboardAddressAttribute(), timeoutSeconds=attributes.IntegerAttribute()))
register_monitor('behaviors.monitors.timers.ResetAfterTimeoutBlocks', dict(timerAddress=attributes.BlackboardAddressAttribute(), timeoutSeconds=attributes.IntegerAttribute()))
register_monitor('behaviors.monitors.timers.StartTimer', dict(timerAddress=attributes.BlackboardAddressAttribute(), timeoutSeconds=attributes.IntegerAttribute()))
register_monitor('behaviors.monitors.timers.StartTimerBlocks', dict(timerAddress=attributes.BlackboardAddressAttribute(), timeoutSeconds=attributes.IntegerAttribute()))
register_monitor('behaviors.monitors.timers.SetBooleanValueAndResetAfterTimeout', dict(timeoutSeconds=attributes.IntegerAttribute(index=0), timerAddress=attributes.BlackboardAddressAttribute(index=1), channelAddress=attributes.BlackboardAddressAttribute(index=2), trueOrFalse=attributes.BooleanAttribute(index=3)))
