#Embedded file name: C:\BuildAgent\work\ba3dced9a47cf95a\eve\release\V22.02\packages\spacecomponents\client\ui\link_with_ship\state\vulnerability_change_controller.py
import gametime
import logging
import traceback
from spacecomponents.common import componentConst
from spacecomponents.common.helper import HasSkyhookReagentSiloComponent, is_theft_vulnerable_skyhook_reagent_silo_component
logger = logging.getLogger(__name__)

class SkyhookVulnerabilityChangeController(object):

    def __init__(self, item_id, type_id, update_callback):
        self._update_callback = update_callback
        self._skyhook_is_theft_vulnerable = None
        self._scheduled_vulnerability_change_datetime = None
        self._last_vulnerability_change_datetime = gametime.now()
        self._vulnerability_change_datetime = None
        self._parent_skyhook_id = None
        if HasSkyhookReagentSiloComponent(type_id):
            component_registry = sm.GetService('michelle').GetBallpark().componentRegistry
            silo_component = component_registry.GetComponentForItem(item_id, componentConst.SKYHOOK_REAGENT_SILO)
            self._parent_skyhook_id = silo_component.get_parent_skyhook_id()
            self._skyhook_is_theft_vulnerable = is_theft_vulnerable_skyhook_reagent_silo_component(component_registry, type_id, item_id)
        sovereignty_resource_svc = sm.GetService('sovereigntyResourceSvc')
        skyhook_notice_listener = sovereignty_resource_svc.skyhookNoticeListener
        self._on_theft_vulnerability_window_scheduled_notice_signal = skyhook_notice_listener.on_theft_vulnerability_window_scheduled_notice
        self._on_theft_vulnerability_window_started_notice_signal = skyhook_notice_listener.on_theft_vulnerability_window_started_notice
        self._on_theft_vulnerability_window_ended_notice_signal = skyhook_notice_listener.on_theft_vulnerability_window_ended_notice
        self._on_theft_vulnerability_status_changed_signal = sovereignty_resource_svc.localSkyhooksData.on_theft_vulnerability_status_changed

    @property
    def is_theft_vulnerable(self):
        return self._skyhook_is_theft_vulnerable

    @property
    def change_datetime(self):
        return self._vulnerability_change_datetime

    @property
    def last_change_datetime(self):
        return self._last_vulnerability_change_datetime

    @property
    def scheduled_change_datetime(self):
        return self._scheduled_vulnerability_change_datetime

    def _on_vulnerability_data_update(self, start_datetime, end_datetime, ignore_past_windows):
        current_datetime = gametime.now()
        if start_datetime <= current_datetime < end_datetime:
            self._on_theft_vulnerability_window_started_notice(self._parent_skyhook_id, end_datetime, start_datetime)
        elif current_datetime < start_datetime:
            self._scheduled_vulnerability_change_datetime = start_datetime
            if self._vulnerability_change_datetime:
                if not self._skyhook_is_theft_vulnerable:
                    self._on_theft_vulnerability_window_ended_notice(self._parent_skyhook_id, self._last_vulnerability_change_datetime)
            else:
                self._on_theft_vulnerability_window_ended_notice(self._parent_skyhook_id)
        elif not ignore_past_windows and end_datetime < current_datetime:
            self._on_theft_vulnerability_window_ended_notice(self._parent_skyhook_id, end_datetime)

    def _on_theft_vulnerability_status_changed(self, skyhook_id, vulnerability_data):
        if skyhook_id != self._parent_skyhook_id:
            logger.warning('self._parent_skyhook_id (%s) does not match skyhook_id (%s)', self._parent_skyhook_id, skyhook_id)
            return
        if not vulnerability_data:
            self._on_theft_vulnerability_window_ended_notice(skyhook_id)
        else:
            self._on_vulnerability_data_update(vulnerability_data.start, vulnerability_data.end, ignore_past_windows=vulnerability_data.vulnerable)

    def _on_theft_vulnerability_window_scheduled_notice(self, skyhook_id, start_datetime, end_datetime):
        if skyhook_id != self._parent_skyhook_id:
            logger.warning('self._parent_skyhook_id (%s) does not match skyhook_id (%s)', self._parent_skyhook_id, skyhook_id)
            return
        self._on_vulnerability_data_update(start_datetime, end_datetime, ignore_past_windows=True)

    def _on_theft_vulnerability_window_started_notice(self, skyhook_id, end_datetime, last_change_datetime = gametime.now()):
        if skyhook_id != self._parent_skyhook_id:
            logger.warning('self._parent_skyhook_id (%s) does not match skyhook_id (%s)', self._parent_skyhook_id, skyhook_id)
            return
        self._scheduled_vulnerability_change_datetime = None
        self._last_vulnerability_change_datetime = last_change_datetime
        self._vulnerability_change_datetime = end_datetime
        self._skyhook_is_theft_vulnerable = True
        self._update_callback()

    def _on_theft_vulnerability_window_ended_notice(self, skyhook_id, last_change_datetime = gametime.now()):
        if skyhook_id != self._parent_skyhook_id:
            logger.warning('self._parent_skyhook_id (%s) does not match skyhook_id (%s)', self._parent_skyhook_id, skyhook_id)
            return
        self._last_vulnerability_change_datetime = last_change_datetime
        self._vulnerability_change_datetime = self._scheduled_vulnerability_change_datetime
        self._scheduled_vulnerability_change_datetime = None
        self._skyhook_is_theft_vulnerable = False
        self._update_callback()

    def sync(self):
        try:
            sovereignty_resource_svc = sm.GetService('sovereigntyResourceSvc')
            skyhook_theft_vulnerability_data = sovereignty_resource_svc.GetTheftVulnerabilityForSkyhook(self._parent_skyhook_id)
            self._on_theft_vulnerability_status_changed(self._parent_skyhook_id, skyhook_theft_vulnerability_data)
        except TypeError:
            logger.warning('Failed to GetTheftVulnerabilityForSkyhook: %s', traceback.format_exc())
        except Exception as e:
            logger.exception('Failed to GetTheftVulnerabilityForSkyhook: %s', e)

    def connect(self):
        self._on_theft_vulnerability_window_scheduled_notice_signal.connect(self._on_theft_vulnerability_window_scheduled_notice)
        self._on_theft_vulnerability_window_started_notice_signal.connect(self._on_theft_vulnerability_window_started_notice)
        self._on_theft_vulnerability_window_ended_notice_signal.connect(self._on_theft_vulnerability_window_ended_notice)

    def disconnect(self):
        self._on_theft_vulnerability_window_scheduled_notice_signal.disconnect(self._on_theft_vulnerability_window_scheduled_notice)
        self._on_theft_vulnerability_window_started_notice_signal.disconnect(self._on_theft_vulnerability_window_started_notice)
        self._on_theft_vulnerability_window_ended_notice_signal.disconnect(self._on_theft_vulnerability_window_ended_notice)
